// Generated by CoffeeScript 1.6.3
(function(window, document) {
  var _routerGet, _routerHash;
  _routerGet = (function() {
    var _url;

    _url = window.location.href;

    function _routerGet() {
      var _getRegX;
      _getRegX = /^.*(\?[A-Za-z0-9_=&%]+)(.*|#)$/;
      if (_getRegX.test(_url)) {
        this.get = _url.replace(_getRegX, '$1');
      } else {
        this.get = void 0;
      }
    }

    /*
     isset method
    */


    _routerGet.prototype.isset = function(getQ, callback) {
      var i, _i, _len, _multi, _rg;
      _rg = new RegExp('^.*' + getQ + '=([A-Za-z0-9%@]+).*$');
      if (typeof getQ === 'string') {
        if (_rg.test(this.get)) {
          if (typeof callback === 'function') {
            return callback(this.get.replace(_rg, '$1').replace(/%20/g, ' '));
          } else {
            return this.get.replace(_rg, '$1').replace(/%20/g, ' ');
          }
        }
      } else if (typeof getQ === 'object') {
        _multi = [];
        for (_i = 0, _len = getQ.length; _i < _len; _i++) {
          i = getQ[_i];
          _rg = new RegExp('^.*' + i + '=([A-Za-z0-9%@]+)(.*|&)$');
          if (_rg.test(this.get)) {
            _multi.push(this.get.replace(_rg, '$1').replace(/%20/g, ' '));
          } else {
            _multi = [];
            return false;
          }
        }
        if (typeof callback === 'function') {
          return callback.apply(this, _multi);
        } else {
          return _multi;
        }
      }
    };

    return _routerGet;

  })();
  _routerHash = (function() {
    var watch, _PathsArr, _PathsFunc, _currentPath, _hash, _run;

    function _routerHash() {}

    _hash = window.location.hash;

    _currentPath = '';

    _PathsArr = [];

    _PathsFunc = {};

    _run = false;

    _routerHash.prototype.when = function(path, callback) {
      if (typeof path !== 'string' || typeof callback !== 'function') {
        throw new Error('Hash method when() params must be when(STRING, FUNCTION) - required');
      }
      _PathsFunc[_PathsArr.length] = callback;
      _PathsArr.push('#!' + path);
      if (_hash === '') {
        window.location.hash = '#!/';
        _hash = '#!/';
      }
      return this;
    };

    (watch = function() {
      var i, _i, _len, _results;
      setTimeout(watch, 600);
      if (window.location.hash !== _currentPath) {
        _hash = window.location.hash;
      }
      _results = [];
      for (_i = 0, _len = _PathsArr.length; _i < _len; _i++) {
        i = _PathsArr[_i];
        if (i === _hash && i !== _currentPath) {
          _currentPath = window.location.hash;
          _results.push(_PathsFunc[_i].call());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    })();

    return _routerHash;

  })();
  return window.Router = function(which) {
    switch (which.toUpperCase()) {
      case 'GET':
        return new _routerGet();
      case 'HASH':
        return new _routerHash();
      default:
        throw new Error('Missing param Router(get|hash)');
    }
  };
})(window, document);
